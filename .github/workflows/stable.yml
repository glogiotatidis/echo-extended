name: stable

on:
  push:
    tags:
      - '*'
  workflow_dispatch: { }

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.ref_name }}
      COMMIT: $( sed -E "s/(.*) <.*@.*>/\\1/g;t" <<< "${{ github.event.head_commit.message }}" | jq -Rsa . | tail -c +2 | head -c -2 )
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17
          cache: 'gradle'

      - name: Cook KeyStore
        continue-on-error: true
        run: echo "${{ secrets.KEYSTORE_B64 }}" | base64 -d > $GITHUB_WORKSPACE/signing-key.jks 2>/dev/null || echo "No keystore secret, building unsigned"

      - name: Cook Google Services
        continue-on-error: true
        run: echo "${{ secrets.GOOGLE_SERVICES_B64 }}" | base64 -d > app/google-services.json 2>/dev/null || echo "No Google Services, skipping Firebase"

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: |
          if [ -f "$GITHUB_WORKSPACE/signing-key.jks" ]; then
            ./gradlew assembleStable \
            -Pandroid.injected.signing.store.file=$GITHUB_WORKSPACE/signing-key.jks \
            -Pandroid.injected.signing.store.password=${{ secrets.PASSWORD }} \
            -Pandroid.injected.signing.key.alias=key0 \
            -Pandroid.injected.signing.key.password=${{ secrets.PASSWORD }}
          else
            echo "No keystore found, building unsigned APK"
            ./gradlew assembleStable
          fi
          cp app/build/outputs/apk/stable/app-stable.apk app/build/${{ env.VERSION }}.apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          path: app/build/outputs/apk/stable/app-stable.apk

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          make_latest: true
          body: ${{ env.COMMIT }}
          files: app/build/${{ env.VERSION }}.apk

      - name: Upload APK to Discord
        continue-on-error: true
        shell: bash
        env:
          WEBHOOK: ${{ secrets.DISCORD_RELEASE_WEBHOOK }}
        run: |
          if [ -z "$WEBHOOK" ]; then
            echo "No Discord webhook configured, skipping"
            exit 0
          fi
          message=$(echo "@everyone **${{ env.VERSION }}**\n${{ env.COMMIT }}")
          curl -F "payload_json={\"content\":\"${message}\"}" \
          -F "echo_beta=@app/build/${{ env.VERSION }}.apk" \
          ${{ env.WEBHOOK }}

      - name: Upload APK to Telegram
        continue-on-error: true
        shell: bash
        env:
          BOT_ID: ${{ secrets.TELEGRAM_BOT_ID }}
          CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          THREAD_ID: ${{ secrets.TELEGRAM_THREAD_ID }}
        run: |
          if [ -z "$BOT_ID" ]; then
            echo "No Telegram bot configured, skipping"
            exit 0
          fi
          regex='s/[\_\*\[\]\(\)\~\`\>\#\+\-\=\|\{\}\.\!]/\\&/g'
          message=$(printf "${{ env.COMMIT }}" | sed -E "$regex")
          curl -F "chat_id=${{ env.CHANNEL_ID }}" \
          -F "message_thread_id=${{ env.THREAD_ID }}" \
          -F "document=@app/build/${{ env.VERSION }}.apk" \
          -F "caption=${message}" \
          -F "parse_mode=MarkdownV2" \
          https://api.telegram.org/bot${{ env.BOT_ID }}/sendDocument
